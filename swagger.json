{
    "openapi": "3.0.0",
    "info": {
        "title": "gypsum REST API",
        "description": "Upload files to the gypsum file store.",
        "version": "1.0.0"
    },

    "servers": [
        {
            "url": "https://gypsum-test.aaron-lun.workers.dev",
            "description": "Production instance of the API"
        }
    ],

    "paths": {

        "/create/{project}": {
            "post": {
                "summary": "Create a new project. This requires administrator privileges.",
                "parameters": [
                    { "$ref": "#/components/parameters/project" }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "description": "Project creation parameters.",
                                "properties": {
                                    "permissions": { "$ref": "#/components/schemas/permissions" }
                                }
                            }
                        }
                    }
                },
                "security": [ { "admin": [] } ],
                "responses": {
                    "200": { "description": "Successful project creation." },
                    "400": {
                        "description": "Invalid project name, or the project already exists.",
                        "content": { 
                            "application/json": {
                                "schema":  { "$ref": "#/components/schemas/error" }
                            }
                        }
                    },
                    "401": { "$ref": "#/components/responses/401" },
                    "403": { "$ref": "#/components/responses/403" }
                },
                "tags": ["Creation"]
            }
        },

        "/remove/{project}": {
            "delete": {
                "summary": "Remove a project. This requires administrator privileges.",
                "parameters": [
                    { "$ref": "#/components/parameters/project" }
                ],
                "security": [ { "admin": [] } ],
                "responses": {
                    "200": { "description": "Successful project removal. Note that this is returned even if `project` did not exist." },
                    "401": { "$ref": "#/components/responses/401" },
                    "403": { "$ref": "#/components/responses/403" }
                },
                "tags": ["Deletion"]
            }
        },

        "/remove/{project}/{asset}": {
            "delete": {
                "summary": "Remove an asset from a project. This requires administrator privileges.",
                "parameters": [
                    { "$ref": "#/components/parameters/project" },
                    { "$ref": "#/components/parameters/asset" }
                ],
                "security": [ { "admin": [] } ],
                "responses": {
                    "200": { "description": "Successful asset removal. Note that this is returned even if `project` or `asset` did not exist." },
                    "401": { "$ref": "#/components/responses/401" },
                    "403": { "$ref": "#/components/responses/403" }
                },
                "tags": ["Deletion"]
            }
        },

        "/remove/{project}/{asset}/{version}": {
            "delete": {
                "summary": "Remove a version of an asset from a project. This requires administrator privileges.",
                "parameters": [
                    { "$ref": "#/components/parameters/project" },
                    { "$ref": "#/components/parameters/asset" },
                    { "$ref": "#/components/parameters/version" }
                ],
                "security": [ { "admin": [] } ],
                "responses": {
                    "200": { "description": "Successful version removal. Note that this is returned even if `project`, `asset` or `version` did not exist." },
                    "401": { "$ref": "#/components/responses/401" },
                    "403": { "$ref": "#/components/responses/403" }
                },
                "tags": ["Deletion"]
            }
        },

        "/upload/start/{project}/{asset}/{version}": {
            "post": {
                "summary": "Start an upload of a new asset or a new version of an existing asset for a project. This requires uploader privileges.",
                "parameters": [
                    { "$ref": "#/components/parameters/project" },
                    { "$ref": "#/components/parameters/asset" },
                    { "$ref": "#/components/parameters/version" }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [ "files" ],
                                "properties": {
                                    "files": {
                                        "description": "Files to be uploaded.",
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "required": [ "path", "type" ],
                                            "properties": {
                                                "path": {
                                                    "type": "string",
                                                    "description": "Path to the file. This is interpreted relative to the version subdirectory."
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "enum": [ "simple", "dedup", "link" ],
                                                    "description": "Type of upload. For `simple`, files are directly uploaded to the destination bucket. For `dedup`, the API will attempt to find a matching file (based on the MD5 checksums and size) in the previous version, and create a link to that version instead of uploading a copy; if no copy can be found, it falls back to `simple`. For `link`, the user is expected to specify the link destination for `path`, and no file is actually uploaded."
                                                },
                                                "md5sum": {
                                                    "type": "string",
                                                    "description": "MD5 checksum for the file, hex-encoded. This only needs to be supplied if `type` is not `link`."
                                                },
                                                "size": {
                                                    "type": "integer",
                                                    "description": "Type of the file, in bytes. This only needs to be supplied if `type` is not `link`.",
                                                    "minimum": 0
                                                },
                                                "link": {
                                                    "type": "object",
                                                    "description": "Link destination for the file, if `type` is `link`.",
                                                    "required": [ "project", "asset", "version", "path" ],
                                                    "properties": {
                                                        "project": {
                                                            "type": "string",
                                                            "description": "Project of the link destination."
                                                        },
                                                        "asset": {
                                                            "type": "string",
                                                            "description": "Asset of the link destination."
                                                        },
                                                        "version": {
                                                            "type": "string",
                                                            "description": "Version of the link destination."
                                                        },
                                                        "path": {
                                                            "type": "string",
                                                            "description": "Relative path of the link destination."
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [ { "uploader": [] } ],
                "responses": {
                    "200": { 
                        "description": "Successful initialization of an upload.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [ "file_urls", "complete_url", "abort_url", "session_token" ],
                                    "properties": {
                                        "file_urls": {
                                            "description": "URLs for uploading non-link files from the request's `files`.",
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "required": [ "method", "path", "url" ],
                                                "properties": {
                                                    "method": {
                                                        "type": "string",
                                                        "description": "Upload method. If `presigned`, a `POST` request to `url` will obtain a presigned S3 URL for direct upload, see the `/upload/presigned-file` endpoint for details. If `multipart`, a `POST` request to `url` will start a multi-part upload.",
                                                        "enum": ["presigned", "multipart"]
                                                    },
                                                    "path": {
                                                        "type": "string",
                                                        "description": "Relative path of the file to be uploaded. This is taken from the `files.path` in the initial request."
                                                    },
                                                    "url": {
                                                        "type": "string",
                                                        "description": "URL to use to start the upload. The exact upload method depends on `method`."
                                                    }
                                                }
                                            }
                                        },
                                        "complete_url": {
                                            "type": "string",
                                            "description": "URL to indicating that the upload of all individual files is complete, see the `/upload/complete` endpoint for details."
                                        },
                                        "abort_url": {
                                            "type": "string",
                                            "description": "URL to abort the upload, see the `/upload/abort` endpoint for details."
                                        },
                                        "session_token": {
                                            "type": "string",
                                            "description": "Token to authenticate subsequent requests for this upload session."
                                        }
                                    }
                                }
                            }

                        }
                    },
                    "401": { "$ref": "#/components/responses/401" },
                    "403": { "$ref": "#/components/responses/403" }
                },
                "tags": ["Upload"]
            }
        },

        "/upload/presigned-file/{slug}": {
            "post": {
                "summary": "Request a presigned URL to upload a single file. This requires a token for initialized upload session.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "slug",
                        "description": "Base64-encoded JSON string containing upload details for a particular file. This is typically generated by the `/upload/start` endpoint.",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "security": [ { "session": [] } ],
                "responses": {
                    "200": { 
                        "description": "Successful request for a presigned URL.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [ "url", "md5sum_base64" ],
                                    "properties": {
                                        "url": {
                                            "type": "string",
                                            "description": "Presigned URL that can be directly used for a file upload via `PUT`."
                                        },
                                        "md5sum_base64": {
                                            "type": "string",
                                            "description": "Base64-encoded MD5 checksum, to be attached as the `Content-MD5` header in the request to `url`."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": { 
                        "description": "Incorrectly formatted request, or the specified version of the project asset already exists.",
                        "content": { 
                            "application/json": {
                                "schema":  { "$ref": "#/components/schemas/error" }
                            }
                        }
                    },
                    "401": { "$ref": "#/components/responses/401" },
                    "403": { "$ref": "#/components/responses/403" }
                },
                "tags": ["Upload"]
            }
        },

        "/upload/complete/{project}/{asset}/{version}": {
            "post": {
                "summary": "Complete an upload. This requires a token for an initialized upload session.",
                "parameters": [
                    { "$ref": "#/components/parameters/project" },
                    { "$ref": "#/components/parameters/asset" },
                    { "$ref": "#/components/parameters/version" }
                ],
                "security": [ { "session": [] } ],
                "responses": {
                    "200": { "description": "Successful completion." },
                    "401": { "$ref": "#/components/responses/401" },
                    "403": { "$ref": "#/components/responses/403" }
                },
                "tags": ["Upload"]
            }
        },

        "/upload/abort/{project}/{asset}/{version}": {
            "post": {
                "summary": "Abort an upload. This requires a token for an initialized upload session.",
                "parameters": [
                    { "$ref": "#/components/parameters/project" },
                    { "$ref": "#/components/parameters/asset" },
                    { "$ref": "#/components/parameters/version" }
                ],
                "security": [ { "session": [] } ],
                "responses": {
                    "200": { "description": "Successful completion." },
                    "401": { "$ref": "#/components/responses/401" },
                    "403": { "$ref": "#/components/responses/403" }
                },
                "tags": ["Upload"]
            }
        },

        "/permissions/{project}": {
            "put": {
                "summary": "Set the permissions for a project. This requires project owner privileges. If a property is missing in the response, the value in the existing permissions is used without modification.",
                "parameters": [
                    { "$ref": "#/components/parameters/project" }
                ],
                    "content": {
                        "application/json": {
                            "schema": { "$ref": "#/components/schemas/permissions" }
                        }
                    }
                },
                "security": [ { "owner": [] } ],
                "responses": {
                    "200": { "description": "Successful change to the project permissions." },
                    "400": { 
                        "description": "Incorrectly formatted request.",
                        "content": { 
                            "application/json": {
                                "schema":  { "$ref": "#/components/schemas/error" }
                            }
                        }
                    },
                    "401": { "$ref": "#/components/responses/401" },
                    "403": { "$ref": "#/components/responses/403" }
                },
                "tags": [ "Permissions" ]
            }
        },

        "/probation/approve/{project}/{asset}/{version}": {
            "post": {
                "summary": "Approve a probational upload. This requires project owner privileges.",
                "parameters": [
                    { "$ref": "#/components/parameters/project" },
                    { "$ref": "#/components/parameters/asset" },
                    { "$ref": "#/components/parameters/version" }
                ],
                "security": [ { "owner": [] } ],
                "responses": {
                    "200": { "description": "Successful approval.." },
                    "401": { "$ref": "#/components/responses/401" },
                    "403": { "$ref": "#/components/responses/403" }
                },
                "tags": ["Probation"]
            }
        },

        "/probation/reject/{project}/{asset}/{version}": {
            "post": {
                "summary": "Reject a probational upload. This requires project owner privileges.",
                "parameters": [
                    { "$ref": "#/components/parameters/project" },
                    { "$ref": "#/components/parameters/asset" },
                    { "$ref": "#/components/parameters/version" }
                ],
                "security": [ { "owner": [] } ],
                "responses": {
                    "200": { "description": "Successful approval.." },
                    "401": { "$ref": "#/components/responses/401" },
                    "403": { "$ref": "#/components/responses/403" }
                },
                "tags": ["Probation"]
            }
        },

        "/credentials/s3-api": {
            "get": {
                "summary": "Get the key and secret for public read-only S3 API access to the R2 bucket.",
                "responses": {
                    "200": { 
                        "description": "S3 credentials for public read-only access.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [ "endpoint", "bucket", "key", "secret" ],
                                    "properties": {
                                        "endpoint": {
                                            "type": "string",
                                            "description": "Endpoint URL for the S3-compatible API."
                                        },
                                        "bucket": {
                                            "type": "string",
                                            "description": "Name of the bucket."
                                        },
                                        "key": {
                                            "type": "string",
                                            "description": "Access key ID."
                                        },
                                        "secret": {
                                            "type": "string",
                                            "description": "Secret access key."
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [ "Permissions" ]
            }
        },

        "/credentials/github-app": {
            "get": {
                "summary": "Get the GitHub app ID and secret for the Oauth2 flow.",
                "responses": {
                    "200": { 
                        "description": "GitHub app credentials for user authentication.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": [ "id", "secret" ],
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "description": "Github app ID."
                                        },
                                        "secret": {
                                            "type": "string",
                                            "description": "App secret."
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [ "Permissions" ]
            }
        }

    },

    "components": {
        "parameters": {
            "project": {
                "in": "path",
                "name": "project",
                "schema": {
                    "type": "string"
                },
                "description": "Name of the project. This should not contain '/' or start with '..'.",
                "required": true
            },
            "asset": {
                "in": "path",
                "name": "asset",
                "schema": {
                    "type": "string"
                },
                "description": "Name of the asset inside a project. This should not contain '/' or start with '..'.",
                "required": true
            },
            "version": {
                "in": "path",
                "name": "version",
                "schema": {
                    "type": "string"
                },
                "description": "Name of the version of the asset inside a project. This should not contain '/' or start with '..'.",
                "required": true
            }
        },

        "responses": {
            "401": {
                "description": "No token supplied.",
                "content": { 
                    "application/json": {
                        "schema":  { "$ref": "#/components/schemas/error" }
                    }
                }
            },
            "403": {
                "description": "User is not authorized to perform this operation.",
                "content": { 
                    "application/json": {
                        "schema":  { "$ref": "#/components/schemas/error" }
                    }
                }
            }
        },

        "schemas": {
            "error": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": ["error"]
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason for the error"
                    }
                }
            },
            "permissions": {
                "type": "object",
                "description": "Permissions for the project.",
                "properties": {
                    "owners": {
                        "description": "GitHub logins of the project owners. Names of GitHub organizations are also allowed, in which case all public members of the organization are considered to be owners.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": []
                    },
                    "uploaders": {
                        "description": "GitHub logins of authorized uploaders. Names of GitHub organizations are also allowed, in which case all public members of the organization are authorized as uploaders.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [ "id" ],
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "GitHub login or organization name."
                                },
                                "asset": {
                                    "type": "string",
                                    "description": "Name of the asset to limit uploads to. If not provided, uploads can be performed to any asset in the project."
                                },
                                "version": {
                                    "type": "string",
                                    "description": "Name of the version to limit uploads to. If not provided, uploads can be performed to any version in the project."
                                },
                                "until": {
                                    "type": "string",
                                    "description": "Lifetime of the upload authorization. If not provided, the authorization lasts indefinitely.",
                                    "format": "date-time"
                                },
                                "trusted": {
                                    "type": "boolean",
                                    "description": "Whether this uploader is to be trusted. If false, all uploads from this user are probational.",
                                    "default": false
                                }

                            }
                        },
                        "default": []
                    }
                }
            }
        },

        "securitySchemes": {
            "admin": {
                "type": "http",
                "scheme": "bearer",
                "description": "GitHub token for an account that gypsum recognizes as an administrator."
            },
            "uploader": {
                "type": "http",
                "scheme": "bearer",
                "description": "GitHub token for an account that is authorized as an uploader for the specified project."
            },
            "owner": {
                "type": "http",
                "scheme": "bearer",
                "description": "GitHub token for an account that is listed as an owner for the specified project."
            },
            "session": {
                "type": "http",
                "scheme": "bearer",
                "description": "Token for an upload session."
            }
        }
    }
}
